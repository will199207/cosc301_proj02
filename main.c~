#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <ctype.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <poll.h>
#include <signal.h>


struct node {
    char name[128];
    struct node *next; 
};
struct processes{
	char process[128]; 
	pid_t pid;
	int state; 
	struct processes *next;
}; 
void list_clear_path(struct node *list) {
    while (list != NULL) {
        struct node *tmp = list;
        list = list->next;
        free(tmp);
    }
}
void list_clear_process(struct processes *head){
    while (head != NULL) {
        struct processes *tmp = head;
        head = head->next;
        free(tmp);
    }
}

void list_append_path(const char *name, struct node **head) {
	struct node *new_node = (struct node*)malloc(sizeof(struct node)); //make some memory for a new node
	for (int i=0; i<strlen(name); i++){	//assign ->name to the passed in array, with a for loop
		new_node-> name[i]=name[i];}

	if (*head == NULL){
		*head = new_node;}
		
	while ((*head)->next != NULL){
		(*head)=(*head)->next;}	
	(*head)->next = new_node; //set the last pointer off the end of the list to the new_node
}

void list_append_process(const char* name, struct processes **head, int state){
	struct processes *new_node = (struct processes*)malloc(sizeof(struct processes)); //make some memory for a new node
	new_node->pid = getpid(); //assign pid
	new_node->state = state; //assing the state
	for (int i=0; i<strlen(name); i++){	//assign ->name to the passed in array, with a for loop
		new_node-> process[i]=name[i];}
	
	if (*head == NULL){
		*head = new_node;}

	while ((*head)->next != NULL){
		(*head)=(*head)->next;}	
	(*head)->next = new_node; //set the last pointer off the end of the list to the new_node
}

void list_delete_process(pid_t pid, struct processes **head) {
	if ((*head)->pid== pid){ //special case if the first node is the one we want to delete
		struct processes* temp= *head;
		*head = (*head)->next;
		free(temp); //delete the first node, new head, free memory
	}

	struct processes *last = *head; //make a pointer to the last node
	struct processes *current =(*head)->next; //make head the current node we are checking

	while (current!=NULL){ //if the node doesnt exist, break
	
		if(current->pid == pid){ //compare the name of the current node to the search name
			last->next = (current)->next; //match found, remove node from list
			free(current); //free the memory
		}

		last = current; //current node becomes last node
		current = (current)->next; //move to the next item in the list
			
	}
}
void print_jobs( struct processes *list) {
    int i = 0;
    printf("Running Processes\n");
    while (list != NULL) {
        printf("Process %d: %s, PID: %d, State (1 running, 0 paused): %d\n", i++, list->process,list->pid, list-> state);
        list = list->next;
    }
}

void check_jobs(struct processes **list) {
	struct pollfd pfd; 
    while ((*list) != NULL) {
	if (kill((*list)->pid, 0) == NULL){
		list_delete_process((*list)->pid, list);}
	else{
		pfd.fd = 0;
		pfd.events = POLLIN; 
		pfd.revents = 0; 
		poll(&pfd, 1, 1000); 
		}
        *list = (*list)->next;
    }
}

void removecomments(char* input){
	char * cmt = index(input, '#');
	if (cmt != NULL){
		cmt[0] = '\0';} 
	return;}

char* remove_white_front(char* token){
	int i = 0;
	while(i<strlen(token)){
		if(isalnum(token[i]) !=0){
			return &token[i]; 
		}else{
			i++;}
		}
	return token;}
 
void remove_white_rear(char* token){
	int i = ((strlen(token))-1);
	while(i>0){
		if(isalnum(token[i]) !=0){
			break; 
		}else{
			token[i] = '\0';
			i--;}
		}
	return;}

int check_str(char* command, int *state, struct processes *head){
	//if an exit/mode command is found, set the state with the pointer
	printf("check str"); 
	if (strcmp("jobs", command) ==0){//if its jobs, call the jobs command
		print_jobs(head);
		return 0;}
	if (strncmp("pause", command, 5)==0){
		char * ptr = &command[6]; 
		kill((pid_t)atoi(ptr), SIGSTOP);
		return 0;}
	if (strncmp("resume", command, 6)==0){
		char * ptr = &command[7]; 
		kill((pid_t)ptr, SIGCONT);
		return 0;}
	if(strcmp("exit", command) == 0){ //exit command checking
		*state = 0;
		return 0;
	}if(strncmp("mode", command, 4)==0){ //make commna
		if(strlen(command)>4){ //is it a state change?
			if (strchr(command, 'p')!=NULL){
				*state = 1;
			}else{
				*state = 2;
			}
		}else if(*state==1){
			printf("State is parallel\n"); 
		}else{
			printf("State is sequental\n");
		}
	return 0; 
	}
	if (command != NULL){//check whatever conditions I want to make sure the string is a valid command
		return 1; 
	}else{
		return 0; 
	}
}

int storetok(char* cmd, char **commands, int size, int *state, struct processes *head){
	//check if the command is valid, add it to a heap allocated array of pointers to commands
	//if its added, return 1, else zer
	if(check_str(cmd, state, head)!=0){
		commands[size] = malloc(sizeof(char)*(strlen(cmd)+1)); //malloc a string, size of token+1
		strcpy(commands[size], cmd);
		return 1; 
	}else{
		return 0;
	}
}


int parser(char *input, char** commands ,int *state, struct processes *head){
		printf("parser str"); 
	removecomments(input); //take care of comments 
	int size = 0;
	char *token; //tokenify the input
	token = strtok(input, ";");

	while(token != NULL){
		token = remove_white_front(token); //remove whitespace from front
		remove_white_rear(token); //remove whitespace from rear
		size += storetok(token, commands, size, state, head);
		token = strtok(NULL, ";");
	}

	//all tokens have been parsed at this point
	//set the last item to NULL, so we can send this string to exec
	commands[size]=NULL;
	//
	return *state;}
		
void make_list(FILE* file, struct node** head){
	char line[1000]={};
	while(fgets(line, 100, file)){ //keep pulling off lines till we are done
		if(feof ( file )){
			break;}
		list_append_path(line, head); //send line to be added to list
	}
}




int main(int argc, char **argv) {
	char * prompt = "Enter Commands: "; 
	char buffer[1024]; 
	int *state = malloc(sizeof(int)); //state is parallel (1), sequental(2), exit(0)
	*state = 1;
	int temp = 0; 
	char** commands;
	pid_t childPID; 
	int i = 0;
	struct processes** pros = NULL;
	struct node** path = NULL;
	FILE* file = NULL;
	//make_list(file, path); 
	printf("%s", prompt);
	//call some function to get the list
	while (fgets(buffer, 1024, stdin) != NULL){	
		i = 0;
		//parse and run input
		commands = malloc(sizeof(char*)*1024); //malloc an array of pointers. each of these will be cmds
		temp = parser(buffer, commands, state, *pros); //parser writes commands to the commands array
		while (commands[i] != NULL){
			childPID = fork(); 
			if (childPID==0){
				check_jobs(pros);
				list_append_process(commands[i], pros, 1);
				execv(commands[i], "NULL");
				kill(getpid(), 1);
			}
			if (childPID>0 && *state==2){
				wait(0); //if sequental, block until child finishes
				printf("parent is waiting\n"); 
			}
			else if (childPID>0 && *state == 1){
				printf("parent is not waiting\n"); //if parallel, run each child and dont bother waiting

			}if(childPID == -1){ // fork failed
				printf("Fork failed\n");
				i--; //re-run the process/ new fork
			}
			i++; 
		}
		free(commands);
		list_clear_path(*path); 
		list_clear_process(*pros);
		*state = temp;
		if (temp == 0){
			break;}
		printf("%s", prompt);
	}//end while
	//OUTSIDE GET COMMAND WHILE LOOP!!
	//wait for all processes to finish

	exit(1);

    return 0;
}

